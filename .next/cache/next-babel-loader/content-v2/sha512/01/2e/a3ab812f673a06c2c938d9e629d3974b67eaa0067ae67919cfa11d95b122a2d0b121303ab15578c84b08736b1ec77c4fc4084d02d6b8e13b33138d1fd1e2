{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/matteosacchi/Dropbox/Il mio Mac (MBP-di-Matteo-3.home)/Documents/GitHub/react-portfolio/components/swiper.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect, useRef } from \"react\";\nimport SwiperCore, { Navigation, Pagination, Scrollbar, A11y, Mousewheel, EffectFade } from 'swiper';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nSwiperCore.use([Navigation, Pagination, A11y, Mousewheel, EffectFade]);\nimport { gsap } from \"gsap\";\nimport { SplitText } from \"gsap/dist/SplitText\";\nexport default function Slideshow({\n  project,\n  addToslideShowRef,\n  changeCoord\n}) {\n  let titleRefs = useRef([]);\n  titleRefs.current = [];\n\n  const addToRefs = el => {\n    if (el && !titleRefs.current.includes(el)) {\n      titleRefs.current.push(el);\n    }\n  };\n\n  const startAnimationNext = () => {\n    titleRefs.current.forEach((item, i) => {\n      if (item.classList.contains(\"active\")) {\n        let tl = gsap.timeline(),\n            mySplitText = new SplitText(item, {\n          type: \"words,chars\",\n          wordsClass: \"split-line\"\n        }),\n            chars = mySplitText.chars;\n        gsap.set(item, {\n          perspective: 400\n        }); // tl.from(chars,\n        //   {  duration: 0.4,\n        //     ease: \"circ.out\",\n        //     y: 70,\n        //     stagger: 0.02\n        //   },\n        //    \"+=0\");\n\n        tl.fromTo(chars, {\n          autoAlpha: 0\n        }, {\n          duration: 1,\n          autoAlpha: 1,\n          ease: \"circ.out\",\n          stagger: 0.03\n        }, \"+=0\");\n      }\n    });\n  };\n\n  const startAnimationPrev = () => {\n    titleRefs.current.forEach((item, i) => {\n      if (item.classList.contains(\"active\")) {\n        titleRefs.current.forEach((item, i) => {\n          if (item.classList.contains(\"active\")) {\n            let tl = gsap.timeline(),\n                mySplitText = new SplitText(item, {\n              type: \"words,chars\",\n              wordsClass: \"split-line\"\n            }),\n                chars = mySplitText.chars;\n            gsap.set(item, {\n              perspective: 400\n            }); // tl.from(chars,\n            //   {  duration: 0.4,\n            //     ease: \"circ.out\",\n            //     y: 70,\n            //     stagger: 0.02\n            //   },\n            //    \"+=0\");\n\n            tl.fromTo(chars, {\n              autoAlpha: 0\n            }, {\n              duration: 1,\n              autoAlpha: 1,\n              ease: \"circ.out\",\n              stagger: 0.03\n            }, \"+=0\");\n          }\n        });\n      }\n    });\n  };\n\n  const params = {\n    container: \".container\",\n    pagination: \".swiper-pagination\",\n    direction: \"vertical\",\n    slidesPerView: 1,\n    speed: 600,\n    effect: \"fade\",\n    fadeEffect: {\n      crossFade: true\n    },\n    mousewheel: {\n      sensitivity: 1\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slider-custom-cont\",\n    children: /*#__PURE__*/_jsxDEV(Swiper, _objectSpread(_objectSpread({}, params), {}, {\n      pagination: {\n        clickable: true\n      },\n      onSlideNextTransitionStart: () => startAnimationNext(),\n      onSlidePrevTransitionStart: () => startAnimationPrev(),\n      onSlideChangeTransitionStart: () => changeCoord(),\n      children: project.map(item => {\n        return /*#__PURE__*/_jsxDEV(SwiperSlide, {\n          children: ({\n            isActive\n          }) => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: addToslideShowRef,\n            className: \"slide-inner \" + (isActive ? 'active' : ''),\n            lat: item.fields.lat,\n            lon: item.fields.lon,\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              ref: addToRefs,\n              className: \"title \" + (isActive ? 'active' : ''),\n              children: item.fields.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: item.fields.subtitle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 18\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              \"data-attr\": \"{item.fields.subtitle}\",\n              children: \" See the project\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 18\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, this);\n      })\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/matteosacchi/Dropbox/Il mio Mac (MBP-di-Matteo-3.home)/Documents/GitHub/react-portfolio/components/swiper.js"],"names":["useState","useEffect","useRef","SwiperCore","Navigation","Pagination","Scrollbar","A11y","Mousewheel","EffectFade","Swiper","SwiperSlide","use","gsap","SplitText","Slideshow","project","addToslideShowRef","changeCoord","titleRefs","current","addToRefs","el","includes","push","startAnimationNext","forEach","item","i","classList","contains","tl","timeline","mySplitText","type","wordsClass","chars","set","perspective","fromTo","autoAlpha","duration","ease","stagger","startAnimationPrev","params","container","pagination","direction","slidesPerView","speed","effect","fadeEffect","crossFade","mousewheel","sensitivity","clickable","map","isActive","fields","lat","lon","title","subtitle"],"mappings":"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","sourcesContent":["import {useState, useEffect, useRef } from \"react\";\nimport SwiperCore, { Navigation, Pagination, Scrollbar, A11y, Mousewheel, EffectFade } from 'swiper';\nimport { Swiper, SwiperSlide } from 'swiper/react';\n\nSwiperCore.use([Navigation, Pagination, A11y, Mousewheel, EffectFade]);\n\nimport { gsap } from \"gsap\";\nimport { SplitText } from \"gsap/dist/SplitText\";\n\nexport default function Slideshow({project, addToslideShowRef, changeCoord}) {\n\n\n  let titleRefs = useRef([]);\n  titleRefs.current = [];\n\n   const addToRefs = (el) =>{\n     if(el && !titleRefs.current.includes(el)){\n       titleRefs.current.push(el);\n     }\n   }\n\n\n  const startAnimationNext = () =>{\n    titleRefs.current.forEach((item, i) => {\n      if(item.classList.contains(\"active\")){\n\n        let tl = gsap.timeline(),\n            mySplitText = new SplitText(item, {type:\"words,chars\", wordsClass: \"split-line\"\n          }),\n          chars = mySplitText.chars;\n          gsap.set(item, {perspective: 400});\n\n        // tl.from(chars,\n        //   {  duration: 0.4,\n        //     ease: \"circ.out\",\n        //     y: 70,\n        //     stagger: 0.02\n        //   },\n        //    \"+=0\");\n\n        tl.fromTo(chars, {autoAlpha: 0},\n          {  duration: 1,\n               autoAlpha: 1,\n               ease: \"circ.out\",\n               stagger: 0.03\n          },\n          \"+=0\");\n      }\n    });\n  }\n  const startAnimationPrev = () =>{\n    titleRefs.current.forEach((item, i) => {\n      if(item.classList.contains(\"active\")){\n        titleRefs.current.forEach((item, i) => {\n          if(item.classList.contains(\"active\")){\n\n            let tl = gsap.timeline(),\n                mySplitText = new SplitText(item, {type:\"words,chars\", wordsClass: \"split-line\"\n              }),\n                chars = mySplitText.chars;\n            gsap.set(item, {perspective: 400});\n\n            // tl.from(chars,\n            //   {  duration: 0.4,\n            //     ease: \"circ.out\",\n            //     y: 70,\n            //     stagger: 0.02\n            //   },\n            //    \"+=0\");\n\n            tl.fromTo(chars, {autoAlpha: 0},\n              {  duration: 1,\n                   autoAlpha: 1,\n                   ease: \"circ.out\",\n                   stagger: 0.03\n              },\n              \"+=0\");\n          }\n        });\n      }\n    });\n  }\n\n\n  const params = {\n    container: \".container\",\n    pagination: \".swiper-pagination\",\n    direction: \"vertical\",\n    slidesPerView: 1,\n    speed: 600,\n    effect: \"fade\",\n    fadeEffect: {\n      crossFade: true\n    },\n    mousewheel: {\n      sensitivity: 1,\n    }\n  };\n\n\n  return (\n    <div className=\"slider-custom-cont\">\n    <Swiper {...params}\n      pagination={{ clickable: true }}\n      onSlideNextTransitionStart={() => startAnimationNext()}\n      onSlidePrevTransitionStart={() => startAnimationPrev()}\n      onSlideChangeTransitionStart={() => changeCoord()}\n    >\n        {project.map((item) => {\n            return (\n              <SwiperSlide>\n               {({ isActive }) => (\n\n                <div ref={addToslideShowRef} className={\"slide-inner \" + (isActive ? 'active' : '')} lat={item.fields.lat} lon={item.fields.lon}>\n                <h1\n                   ref={addToRefs}\n                   className={\"title \" + (isActive ? 'active' : '')}\n                 >\n                 {item.fields.title}\n                 </h1>\n                 <h4>{item.fields.subtitle}</h4>\n                 <span data-attr=\"{item.fields.subtitle}\"> See the project</span>\n              </div>\n              )}\n            </SwiperSlide>\n            )\n          })\n        }\n    </Swiper>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}