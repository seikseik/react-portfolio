{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/matteosacchi/Dropbox/Il mio Mac (MBP-di-Matteo-3.home)/Documents/GitHub/react-portfolio/components/swiper.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect, useRef } from \"react\";\nimport SwiperCore, { Navigation, Pagination, Scrollbar, A11y, Mousewheel } from 'swiper';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nSwiperCore.use([Navigation, Pagination, A11y, Mousewheel]);\nimport { gsap } from \"gsap\";\nimport { SplitText } from \"gsap/dist/SplitText\";\nimport { ScrollTrigger } from \"gsap/dist/ScrollTrigger\";\ngsap.registerPlugin(ScrollTrigger);\nexport default function Slideshow({\n  project\n}) {\n  let titleRefs = useRef([]);\n  titleRefs.current = [];\n\n  const addToRefs = el => {\n    if (el && !titleRefs.current.includes(el)) {\n      titleRefs.current.push(el);\n    }\n  };\n\n  const startAnimation = () => {// console.log(\"start\")\n    // titleRefs.current.forEach((item, i) => {\n    //   if(item.classList.contains(\"active\")){\n    //     gsap.to(item, 1, {opacity: 1 });\n    //   }else{\n    //     gsap.set(item, {opacity: 0});\n    //   }\n    // });\n  };\n\n  const params = {\n    container: \".container\",\n    pagination: \".swiper-pagination\",\n    direction: \"vertical\",\n    speed: 800,\n    mousewheel: {\n      sensitivity: 4\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Swiper, _objectSpread(_objectSpread({}, params), {}, {\n    slidesPerView: 1,\n    pagination: {\n      clickable: true\n    },\n    onTransitionStart: () => startAnimation(),\n    children: project.map(item => {\n      return /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        children: ({\n          isActive\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slide-inner\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            ref: addToRefs,\n            className: \"title \" + (isActive ? 'active' : ''),\n            children: item.fields.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }, this);\n    })\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/matteosacchi/Dropbox/Il mio Mac (MBP-di-Matteo-3.home)/Documents/GitHub/react-portfolio/components/swiper.js"],"names":["useState","useEffect","useRef","SwiperCore","Navigation","Pagination","Scrollbar","A11y","Mousewheel","Swiper","SwiperSlide","use","gsap","SplitText","ScrollTrigger","registerPlugin","Slideshow","project","titleRefs","current","addToRefs","el","includes","push","startAnimation","params","container","pagination","direction","speed","mousewheel","sensitivity","clickable","map","item","isActive","fields","title"],"mappings":";;;;;;;;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,MAA7B,QAA2C,OAA3C;AACA,OAAOC,UAAP,IAAqBC,UAArB,EAAiCC,UAAjC,EAA6CC,SAA7C,EAAwDC,IAAxD,EAA8DC,UAA9D,QAAgF,QAAhF;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,cAApC;AAEAP,UAAU,CAACQ,GAAX,CAAe,CAACP,UAAD,EAAaC,UAAb,EAAyBE,IAAzB,EAA+BC,UAA/B,CAAf;AAEA,SAASI,IAAT,QAAqB,MAArB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,aAAT,QAA8B,yBAA9B;AAEAF,IAAI,CAACG,cAAL,CAAoBD,aAApB;AAEA,eAAe,SAASE,SAAT,CAAmB;AAACC,EAAAA;AAAD,CAAnB,EAA8B;AAI3C,MAAIC,SAAS,GAAGhB,MAAM,CAAC,EAAD,CAAtB;AACAgB,EAAAA,SAAS,CAACC,OAAV,GAAoB,EAApB;;AAEC,QAAMC,SAAS,GAAIC,EAAD,IAAO;AACvB,QAAGA,EAAE,IAAI,CAACH,SAAS,CAACC,OAAV,CAAkBG,QAAlB,CAA2BD,EAA3B,CAAV,EAAyC;AACvCH,MAAAA,SAAS,CAACC,OAAV,CAAkBI,IAAlB,CAAuBF,EAAvB;AACD;AACF,GAJD;;AAMH,QAAMG,cAAc,GAAG,MAAK,CAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAED,GAVD;;AAcE,QAAMC,MAAM,GAAG;AACbC,IAAAA,SAAS,EAAE,YADE;AAEbC,IAAAA,UAAU,EAAE,oBAFC;AAGbC,IAAAA,SAAS,EAAE,UAHE;AAIbC,IAAAA,KAAK,EAAE,GAJM;AAKbC,IAAAA,UAAU,EAAE;AACVC,MAAAA,WAAW,EAAE;AADH;AALC,GAAf;AAWA,sBACE,QAAC,MAAD,kCAAYN,MAAZ;AACE,IAAA,aAAa,EAAE,CADjB;AAEE,IAAA,UAAU,EAAE;AAAEO,MAAAA,SAAS,EAAE;AAAb,KAFd;AAGE,IAAA,iBAAiB,EAAE,MAAMR,cAAc,EAHzC;AAAA,cAKKP,OAAO,CAACgB,GAAR,CAAaC,IAAD,IAAU;AACnB,0BACE,QAAC,WAAD;AAAA,kBACE,CAAC;AAAEC,UAAAA;AAAF,SAAD,kBACF;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,iCACE;AAAI,YAAA,GAAG,EAAEf,SAAT;AAAoB,YAAA,SAAS,EAAE,YAAYe,QAAQ,GAAG,QAAH,GAAc,EAAlC,CAA/B;AAAA,sBACGD,IAAI,CAACE,MAAL,CAAYC;AADf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,cADF;AAWD,KAZF;AALL;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD","sourcesContent":["import {useState, useEffect, useRef } from \"react\";\nimport SwiperCore, { Navigation, Pagination, Scrollbar, A11y, Mousewheel } from 'swiper';\nimport { Swiper, SwiperSlide } from 'swiper/react';\n\nSwiperCore.use([Navigation, Pagination, A11y, Mousewheel]);\n\nimport { gsap } from \"gsap\";\nimport { SplitText } from \"gsap/dist/SplitText\";\nimport { ScrollTrigger } from \"gsap/dist/ScrollTrigger\";\n\ngsap.registerPlugin(ScrollTrigger)\n\nexport default function Slideshow({project}) {\n\n\n\n  let titleRefs = useRef([]);\n  titleRefs.current = [];\n\n   const addToRefs = (el) =>{\n     if(el && !titleRefs.current.includes(el)){\n       titleRefs.current.push(el);\n     }\n   }\n\nconst startAnimation = () =>{\n  // console.log(\"start\")\n  // titleRefs.current.forEach((item, i) => {\n  //   if(item.classList.contains(\"active\")){\n  //     gsap.to(item, 1, {opacity: 1 });\n  //   }else{\n  //     gsap.set(item, {opacity: 0});\n  //   }\n  // });\n\n}\n\n\n\n  const params = {\n    container: \".container\",\n    pagination: \".swiper-pagination\",\n    direction: \"vertical\",\n    speed: 800,\n    mousewheel: {\n      sensitivity: 4,\n    }\n  };\n\n\n  return (\n    <Swiper {...params}\n      slidesPerView={1}\n      pagination={{ clickable: true }}\n      onTransitionStart={() => startAnimation()}\n    >\n        {project.map((item) => {\n            return (\n              <SwiperSlide >\n               {({ isActive }) => (\n              <div className=\"slide-inner\">\n                <h1 ref={addToRefs} className={\"title \" + (isActive ? 'active' : '')}\n                 >{item.fields.title}\n                 </h1>\n              </div>\n              )}\n            </SwiperSlide>\n            )\n          })\n        }\n    </Swiper>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}